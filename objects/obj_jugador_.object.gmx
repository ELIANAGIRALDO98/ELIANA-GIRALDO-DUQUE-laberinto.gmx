<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_jugador</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>velocidad = 32;

llave_roja = false;
llave_negra = false;
llave_morada = false;
llave_dorada = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movimiento del jugador 

if (keyboard_check_pressed(vk_left)){
    if (!place_meeting(x-velocidad,y,obj_muro))&amp;&amp;(!place_meeting(x - velocidad, y, obj_puerta_padre)) {
        x = x - velocidad
    }
}

if (keyboard_check_pressed(vk_right)){
    if (!place_meeting(x+velocidad,y,obj_muro))&amp;&amp;(!place_meeting(x + velocidad, y, obj_puerta_padre)) {
        x = x + velocidad
    }
}

if (keyboard_check_pressed(vk_up)){
    if (!place_meeting(x,y-velocidad,obj_muro))&amp;&amp;(!place_meeting(x,y - velocidad, obj_puerta_padre)) {
        y= y - velocidad
    } 
}

if (keyboard_check_pressed(vk_down)){
    if (!place_meeting(x,y+velocidad,obj_muro))&amp;&amp;(!place_meeting(x,y+velocidad, obj_puerta_padre)) {
        y= y +velocidad
    }
}
    
/*if(!place_meeting(x+velocidad,y,obj_muro)){
    if (keyboard_check_pressed(vk_right)){
        x = x + velocidad;
    }
}
    
if(!place_meeting(x,y-velocidad,obj_muro)){
    if (keyboard_check_pressed(vk_up)){
        y = y - velocidad;
    }  
}
    
if(!place_meeting(x,y+velocidad,obj_muro)){
    if (keyboard_check_pressed(vk_down)){
        y = y + velocidad;
    } 
}
*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gestión de llaves

/*  se utilizará place_meeting para verificar la colisión con alguna llave
    luego se destruye la llave y se pone a true la variable respectiva en 
    el objeto principal de llave.
    */ 
    
if (place_meeting(x,y,obj_llave_roja))
    {
    with(obj_llave_roja){instance_destroy();}
    llave_roja = true;
    }
    
if (place_meeting(x,y,obj_llave_negra))
    {
    with(obj_llave_negra){instance_destroy();}
    llave_negra= true;
    }
    
if (place_meeting(x,y,obj_llave_morada))
    {
    with(obj_llave_morada){instance_destroy();}
    llave_morada = true;   
     }
     
 if(place_meeting(x,y,obj_llave_dorada))
     {
     with(obj_llave_dorada){instance_destroy();}
     llave_dorada = true;
     }
     
 if (place_meeting(x,y,obj_llaves_3))
     {
     with (obj_llaves_3){instance_destroy();}
     llaves_3=true;
     }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gestión de las puertas 

/*  En forma similar a las llaves se verifica el estado de la variable  
    repectiva de la llave, la colisión y luego se destruye la puerta.
    */

if(llave_roja)
    {
    if(!place_meeting(x+velocidad, y,obj_puerta_roja))||
    (place_meeting(x-velocidad, y,obj_puerta_roja))||
    (place_meeting(x, y-velocidad,obj_puerta_roja))||
        (place_meeting(x,y, obj_puerta_roja))
            {
        with(obj_puerta_roja){instance_destroy();}
        }
    }
       
    if(llave_negra)
    {
    if(!place_meeting(x+velocidad, y,obj_puerta_negra))||
    (place_meeting(x-velocidad, y,obj_puerta_negra))||
    (place_meeting(x, y-velocidad,obj_puerta_negra))|
    (place_meeting(x,y, obj_puerta_negra))
        {
        with(obj_puerta_negra){instance_destroy();}
        }
    }
    
        if(llave_morada)
    {
    if(!place_meeting(x+velocidad, y,obj_puerta_morada))||
    (place_meeting(x-velocidad, y,obj_puerta_morada))||
    (place_meeting(x, y-velocidad,obj_puerta_morada))||
    (place_meeting(x,y, obj_puerta_morada))
        {
        with(obj_puerta_morada){instance_destroy();}
        }
    }
        
        if(llave_dorada)
    {
    if(!place_meeting(x+velocidad, y,obj_puerta_dorada))||
    (place_meeting(x-velocidad, y,obj_puerta_dorada))||
    (place_meeting(x, y-velocidad,obj_puerta_dorada))||
    (place_meeting(x,y, obj_puerta_dorada))
        {
        with(obj_puerta_dorada){instance_destroy();}
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemigo_padre">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bandera">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room_exists(room_next(room)))
    {room_goto_next();}
    else
    {room_goto(INICIO_);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
